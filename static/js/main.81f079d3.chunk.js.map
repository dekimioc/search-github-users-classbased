{"version":3,"sources":["components/components/SearchForm/SearchForm.js","components/components/UserCard/UserCard.js","components/components/ErrorModal/ErrorModal.js","components/redux/actions.js","components/redux/action.types.js","components/pages/SearchPage/SearchPage.js","components/components/Header/Header.js","components/components/RepoCard/RepoCard.js","components/pages/RepoPage/RepoPage.js","App.js","serviceWorker.js","components/redux/rootReducer.js","components/redux/store.js","index.js"],"names":["SearchForm","props","onSubmit","submitForm","className","placeholder","name","value","inputValue","onChange","changedValue","type","disabledButton","disabled","UserCard","loginData","length","to","onClick","getRepo","src","avatar","alt","description","slice","ErrorModal","Fragment","onClose","messageErr","children","setError","error","message","getUserRepos","dispatch","getState","fetch","userRepoLink","then","res","json","data","repos","catch","err","console","log","SearchPage","this","onCloseError","errorMessage","input","onFetchUser","e","onInputChange","onGetRepos","userName","Component","connect","state","userDescription","repoLink","userReposList","inputHandler","target","preventDefault","status","user","bio","login","avatar_url","repos_url","Header","RepoCard","repoName","repoDescription","stargazers","watchers","forks","dateCreated","href","link","rel","RepoPage","onGetRepo","userRepos","map","repo","created_at","forks_count","html_url","key","id","licenceType","license","stargazers_count","watchers_count","App","basename","path","exact","component","Boolean","window","location","hostname","match","initialState","apiDataReducer","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.81f079d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchForm.scss'\r\n\r\nconst SearchForm = (props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.submitForm}>\r\n                <div>\r\n                    <input\r\n                        className=\"input-form\"\r\n                        placeholder='Search Users'\r\n                        name='name'\r\n                        value={props.inputValue}\r\n                        onChange={props.changedValue}\r\n                        type=\"text\"\r\n\r\n                    />\r\n                    <button className={props.disabledButton ? \"input-button-dis\" : \"input-button\"} type=\"submit\" disabled={props.disabledButton}>Submit</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './UserCard.scss';\r\n\r\nconst UserCard = (props) => {\r\n    return (\r\n        <div>\r\n            {props.loginData.length === 0 ? \"\" : <h1>Card for matched user</h1>}\r\n            {props.loginData.length === 0 ? <h1>List is empty, please type characters in the form and press Submit!</h1> :\r\n                <Link to=\"/search-github-users-classbased/repositories\"><button onClick={props.getRepo} type=\"submit\" className=\"userCardLink\">\r\n                    <div>\r\n                        <img src={props.avatar} alt={props.name} />\r\n                        <h1>{!props.name ? \"User did not defind a name\" : props.name}</h1>\r\n                        <p>{!props.description ? \"User has no descritpion!\" : props.description.slice(0, 90) + '...'}</p>\r\n                    </div>\r\n                </button></Link>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default UserCard;","import React from 'react';\r\n\r\nimport './ErrorModal.scss';\r\n\r\nconst ErrorModal = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"backdrop\" onClick={props.onClose} />\r\n            <div className=\"error-modal\">\r\n                <h2>{props.messageErr}</h2>\r\n                <p>{props.children}</p>\r\n                <div className=\"error-modal__actions\">\r\n                    <button type=\"button\" onClick={props.onClose}>\r\n                        Okay\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ErrorModal;","import {\r\n    GET_NAME,\r\n    GET_USER_NAME,\r\n    GET_USER_DESCRIPTION,\r\n    GET_USER_AVATAR,\r\n    GET_USER_REPO_LINK,\r\n    GET_USER_REPOS,\r\n    GET_INPUT_VALUE,\r\n    GET_ERROR,\r\n    ERROR_MESSAGE,\r\n    RESSET\r\n} from './action.types';\r\n\r\n// import { useHistory } from 'react-router-dom';\r\n// const history = useHistory();\r\n\r\nexport const setName = user => {\r\n    return {\r\n        type: GET_NAME,\r\n        user: user\r\n    }\r\n}\r\n\r\nexport const setUserDescription = userDescription => {\r\n    return {\r\n        type: GET_USER_DESCRIPTION,\r\n        userDescription: userDescription\r\n    }\r\n}\r\n\r\nexport const setUserName = userName => {\r\n    return {\r\n        type: GET_USER_NAME,\r\n        user: userName\r\n    }\r\n}\r\n\r\nexport const setUserAvatar = avatar => {\r\n    return {\r\n        type: GET_USER_AVATAR,\r\n        avatar: avatar\r\n    }\r\n}\r\n\r\nexport const setRepoLink = repoLink => {\r\n    return {\r\n        type: GET_USER_REPO_LINK,\r\n        repoLink: repoLink\r\n    }\r\n}\r\n\r\nexport const setRepos = repos => {\r\n    return {\r\n        type: GET_USER_REPOS,\r\n        repos: repos\r\n    }\r\n}\r\n\r\nexport const setError = error => {\r\n    return {\r\n        type: GET_ERROR,\r\n        error: error.message\r\n    }\r\n}\r\n\r\nexport const ressetError = error => {\r\n    return {\r\n        type: RESSET,\r\n        error: error\r\n    }\r\n}\r\nexport const errorMessage = errorMsg => {\r\n    return {\r\n        type: ERROR_MESSAGE,\r\n        error: errorMsg\r\n    }\r\n}\r\n\r\nexport const fetchUser = () => {\r\n    return (dispatch, getState) => {\r\n        fetch(`https://api.github.com/users/${getState().inputValue}`)\r\n            .then(res => {\r\n                if (res.status === 200) {\r\n                    return res.json();\r\n                } else if (res.status === 404) {\r\n                    dispatch(setError(\"\"))\r\n                } else {\r\n                    dispatch(setError(\"\"))\r\n                }\r\n            })\r\n            .then(data => {\r\n                dispatch(setName(data.name))\r\n                dispatch(setUserDescription(data.bio))\r\n                dispatch(setUserName(data.login))\r\n                dispatch(setUserAvatar(data.avatar_url))\r\n                dispatch(setRepoLink(data.repos_url))\r\n            })\r\n            .catch((err) => dispatch(errorMessage('Something went wrong! Please try again!'))\r\n            );\r\n    }\r\n}\r\n\r\nexport const getUserRepos = () => {\r\n    return (dispatch, getState) => {\r\n        fetch(`${getState().userRepoLink}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                dispatch(setRepos(data));\r\n            })\r\n            .catch((err) => (console.log(err.message)))\r\n    }\r\n}\r\n\r\nexport const inputHandler = e => {\r\n    return {\r\n        type: GET_INPUT_VALUE,\r\n        e: e\r\n    };\r\n};","export const GET_NAME = 'GET_NAME';\r\nexport const GET_USER_NAME = 'GET_USER_NAME';\r\nexport const GET_USER_DESCRIPTION = 'GET_USER_DESCRIPTION';\r\nexport const GET_USER_AVATAR = 'GET_USER_AVATAR';\r\nexport const GET_USER_REPO_LINK = 'GET_USER_REPO_LINK';\r\nexport const GET_USER_REPOS = 'GET_USER_REPOS';\r\nexport const GET_INPUT_VALUE = 'GET_INPUT_VALUE';\r\nexport const RESSET = 'RESSET';\r\nexport const ERROR_MESSAGE = 'ERROR_MESSAGE';\r\nexport const GET_ERROR = 'GET_ERROR';\r\n","import React, { Component } from 'react';\r\nimport SearchForm from '../../components/SearchForm/SearchForm';\r\nimport UserCard from '../../components/UserCard/UserCard';\r\nimport ErrorModal from '../../components/ErrorModal/ErrorModal';\r\nimport { connect } from 'react-redux';\r\nimport { inputHandler, fetchUser, ressetError, getUserRepos } from '../../redux/actions';\r\n\r\nimport './SearchPage.scss';\r\n\r\nclass SearchPage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.error && <ErrorModal onClose={this.props.onCloseError} messageErr={this.props.errorMessage} />}\r\n                <SearchForm\r\n                    inputValue={this.props.input}\r\n                    submitForm={this.props.onFetchUser}\r\n                    changedValue={e => this.props.onInputChange(e)}\r\n                    disabledButton={false} />\r\n                <UserCard\r\n                    avatar={this.props.avatar}\r\n                    name={this.props.name}\r\n                    description={this.props.description}\r\n                    getRepo={this.props.onGetRepos}\r\n                    loginData={this.props.userName} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        input: state.inputValue,\r\n        name: state.name,\r\n        userName: state.userName,\r\n        description: state.userDescription,\r\n        avatar: state.avatar,\r\n        repoLink: state.userRepoLink,\r\n        userReposList: state.userRepoLink,\r\n        error: state.error,\r\n        errorMessage: state.errorMessage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onInputChange: (e) => dispatch(inputHandler(e.target.value)),\r\n        onFetchUser: (e) => dispatch(fetchUser(e.preventDefault())),\r\n        onCloseError: () => dispatch(ressetError()),\r\n        onGetRepos: () => dispatch(getUserRepos())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);","import React from 'react';\r\nimport './Header.scss';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header-cont\">\r\n            <h2>Search GitHub users</h2>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './RepoCard.scss';\r\n\r\nconst RepoCard = (props) => {\r\n    return (\r\n        <div className=\"repoCard\">\r\n            <h3><strong>Repo Name: </strong>{props.repoName}</h3>\r\n            <h5><strong>Description: </strong>{!props.repoDescription ? \"No Descritpion\" : props.repoDescription}</h5>\r\n            <div className=\"bottomRowRepoCard\">\r\n                <p><strong>Stargazers: </strong>{props.stargazers}</p>\r\n                <p><strong>Watchers: </strong>{props.watchers}</p>\r\n                <p><strong>Forks: </strong>{props.forks}</p>\r\n                <p><strong>Created at: </strong>{props.dateCreated.slice(0, 10)}</p>\r\n                {/* <p><strong>Licence Type: </strong> {!props.licenceType ? \"No Licence Type\" : props.licenceType}</p> */}\r\n            </div>\r\n            <a className=\"repoButt\" href={props.link} target=\"_blank\" rel=\"noopener noreferrer\">View repo</a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RepoCard;","import React, { Component } from 'react';\r\nimport RepoCard from '../../components/RepoCard/RepoCard';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { getUserRepos } from '../../redux/actions';\r\n\r\nimport './RepoPage.scss';\r\nclass RepoPage extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onGetRepo();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"repoPageMainContainer\">\r\n                <h1>{this.props.userRepos.length === 0 ? 'No repositories' : \"Repositories for selected user\"}</h1>\r\n                <div className=\"reposCardContainer\">\r\n                    {this.props.userRepos && this.props.userRepos.map(repo => <RepoCard\r\n                        repoDescription={repo.description}\r\n                        dateCreated={repo.created_at}\r\n                        forks={repo.forks_count}\r\n                        link={repo.html_url}\r\n                        key={repo.id}\r\n                        licenceType={repo.license}\r\n                        repoName={repo.name}\r\n                        stargazers={repo.stargazers_count}\r\n                        watchers={repo.watchers_count} />\r\n                    )\r\n                    }\r\n                </div>\r\n                <Link to=\"/search-github-users-classbased\" className=\"back-button\">Back to Search Page</Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        userRepos: state.userRepos,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onGetRepo: (e) => dispatch(getUserRepos()),\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RepoPage);","import React from 'react';\nimport SearchPage from './components/pages/SearchPage/SearchPage';\nimport Header from './components/components/Header/Header';\nimport RepoPage from './components/pages/RepoPage/RepoPage';\nimport { BrowserRouter as Router, Route, HashRouter, Switch } from 'react-router-dom';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter basename=\"/\">\n        <Header />\n        <Router>\n          <Switch>\n            <Route path=\"/search-github-users-classbased\" exact component={SearchPage} />\n            <Route path=\"/search-github-users-classbased/repositories\" component={RepoPage} />\n          </Switch>\n        </Router>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    GET_NAME,\r\n    GET_USER_NAME,\r\n    GET_USER_DESCRIPTION,\r\n    GET_USER_AVATAR,\r\n    GET_USER_REPO_LINK,\r\n    GET_USER_REPOS,\r\n    GET_INPUT_VALUE,\r\n    GET_ERROR,\r\n    RESSET,\r\n    ERROR_MESSAGE\r\n} from './action.types';\r\n\r\nexport const initialState = {\r\n    name: '',\r\n    userName: '',\r\n    userDescription: '',\r\n    avatar: '',\r\n    userRepoLink: '',\r\n    userRepos: [],\r\n    inputValue: '',\r\n    error: null,\r\n    errorMessage: ''\r\n}\r\n\r\nconst apiDataReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_INPUT_VALUE:\r\n            return {\r\n                ...state,\r\n                inputValue: action.e\r\n            }\r\n        case GET_USER_DESCRIPTION:\r\n            return {\r\n                ...state,\r\n                userRepos: [],\r\n                userDescription: action.userDescription\r\n            }\r\n        case GET_USER_AVATAR:\r\n            return {\r\n                ...state,\r\n                avatar: action.avatar\r\n            }\r\n        case GET_NAME:\r\n            return {\r\n                ...state,\r\n                name: action.user\r\n            }\r\n        case GET_USER_NAME:\r\n            return {\r\n                ...state,\r\n                userName: action\r\n            }\r\n        case GET_USER_REPO_LINK:\r\n            return {\r\n                ...state,\r\n                userRepoLink: action.repoLink\r\n            }\r\n        case GET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: true,\r\n                // errorMessage: 'Something went wrong! Please try again!'\r\n            }\r\n        case GET_USER_REPOS:\r\n            return {\r\n                ...state,\r\n                userRepos: [...action.repos]\r\n            }\r\n        case RESSET:\r\n            return {\r\n                ...state,\r\n                name: '',\r\n                userName: '',\r\n                userDescription: '',\r\n                avatar: '',\r\n                userRepoLink: '',\r\n                userRepos: [],\r\n                inputValue: '',\r\n                error: null,\r\n                errorMessage: ''\r\n            }\r\n        case ERROR_MESSAGE: {\r\n            return {\r\n                ...state,\r\n                errorMessage: action.error\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\nexport default apiDataReducer;\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport apiDataReducer from './rootReducer';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    apiDataReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './components/redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}